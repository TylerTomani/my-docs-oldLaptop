<h1>04-02- scrape in book url</h1>
<div class="steps-container show">
    <!-- 01-01 -->
    <div class="step-col">
        <div tabindex="1" class="step-txt">
            <h4>01</h4>
            <p>
                We want to scrape inside the <code>book['url']</code> link, from this page,
                <br>
                <a target="_blank" href="https://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html">https://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html</a>
                which is the <code>['url']</code> of the first book
            </p>
        </div>
        <div class="img-2-container">
            <div class="step-img">
                <img class="xlg-enlarge"
                    src="/scrapy/01-scrapy-freeCodeCamp/sections/04-getNextPageUrls/04-02-scrapeInBookUrl/images/01-01.png">
            </div>
            <div class="step-img">
                <img class="lg-enlarge"
                    src="/scrapy/01-scrapy-freeCodeCamp/sections/04-getNextPageUrls/04-02-scrapeInBookUrl/images/01-01b.png">
            </div>
        </div>
    </div>
    <!-- 01-02 -->
    <div class="step">
        <div tabindex="1" class="step-txt">
            <h4>02</h4>
            <p>
                Apply the same <code class="gr">next_page</code> technique to the <span class="gr">book_url</span>. Add pass in the
                the method <code class="m">parse_book_page</code> to the callback
            </p>
            <div class="code-container">
                <pre tabindex="1" class="copy-code">
'url': <span class="y">book.css('h3 a::attr(href)').get()</span></pre>
            </div>            
            <div class="code-container ">
                <pre tabindex="1" class="copy-code smtxt">
import scrapy
class BookspiderSpider(scrapy.Spider):
    name = 'bookspider'
    allow_domains = ['books.toscrape.com']
    start_urls = ['http://books.toscrape.com/']
    
    def parse(self,response):
        books = response.css('article.product_pod')
        for book in books:
            relative_url = <span class="y">book.css('h3 a::attr(href)').get()</span>
            if 'catalogue' in relative_url:
                <span class="gr">next_book_url</span> = 'http://books.toscrape.com/' + relative_url
            else:
                <span class="gr">next_book_url</span> = 'http://books.toscrape.com/catalogue/' + relative_url
            yield response.follow(<span class="gr">next_book_url</span>,callback=self.<span class="m">parse_book_page</span>)

        next_page = response.css('li.next a::attr(href)').get()
        if next_page is not None:
            if 'catalogue' in next_page:
                next_page_url = 'http://books.toscrape.com/' + next_page
            else:
                next_page_url = 'http://books.toscrape.com/catalogue/' + next_page
            yield response.follow(next_page_url, callback=self.parse)
    def <span class="m">parse_book_page</span>(self,response):
        yield {
            'url': response.url
        }
        </pre>
            </div>
        </div>
        <div class="step-img">
            <img class="lg-enlarge"
src="/scrapy/01-scrapy-freeCodeCamp/sections/04-getNextPageUrls/04-02-scrapeInBookUrl/images/01-02.png">
        </div>
    </div>
    <!-- 01-03 -->
    <div class="step">
        <div tabindex="1" class="step-txt">
            <h4>03</h4>
            <p>
                Use the scrapy shell and find the elements to scrape,
            </p>
            <ul>
                <li>Name</li>
                <li>url</li>
                <li>title</li>
                <li>product_type</li>
                <li>price_excl_tax</li>
                <li>price_incl_tax</li>
                <li>tax</li>
                <li>stars</li>
                <li>category</li>
                <li>description</li>
            </ul>
        </div>
        <div class="step-img">
            <img src="/scrapy/01-scrapy-freeCodeCamp/sections/04-getNextPageUrls/04-02-scrapeInBookUrl/images/01-03.png">
        </div>
    </div>
    <!-- 01-04 -->
    <div class="step">
        <div tabindex="1" class="step-txt">
            <h4>04</h4>
            <p>
                Run script save to .json or .csv (excel files)
                
            </p>
            <div class="code-container">
                <pre tabindex="1" class="copy-code">
scrapy runspider bookspider.py <span class="y">-O bookdata.json</span> 
                </pre>
            </div>
            
            <div class="code-container">
                <pre tabindex="1" class="copy-code">
import scrapy 
class BookspiderSpider(scrapy.Spider):
    name = 'bookspider'
    allowed_domains =['books.toscrape.com']
    start_urls = ["https://books.toscrape.com/"]
    def parse(self,response):
        books = response.css('article.product_pod')
        for book in books:
            relative_url = book.css('h3 a::attr(href)').get()
            if 'catalogue' in relative_url:
                relative_url = 'https://books.toscrape.com/' + relative_url
            else:
                relative_url = 'https://books.toscrape.com/catalogue/' + relative_url
            yield response.follow(relative_url, callback=self.parse_book_page)

        next_page = response.css('li.next a::attr(href)').get()
        if next_page is not None:
            if 'catalogue/' in next_page:
                next_page_url = "https://books.toscrape.com/" + next_page
            else:
                next_page_url = "https://books.toscrape.com/catalogue/" + next_page
            yield response.follow(next_page_url, callback=self.parse)
            
    <pre tabindex="1" class="copy-code">
        def parse_book_page(self,response):
        rows = response.css('table tr')
    
        yield {
            'url': response.url,
            'title':          response.css('h1::text').get(),
            'product_type':   rows[1].css('td::text').get(),
            'price_excl_tax': rows[2].css('td::text').get(),
            'price_incl_tax': rows[3].css('td::text').get() ,
            'tax':            rows[4].css('td::text').get(),
            'stars': response.css('p.star-rating').attrib['class'].split()[1],
            'category': response.xpath("//ul[@class='breadcrumb']/li[@class='active']/preceding-sibling::li[1]/a/text()").get(),
            'description': response.xpath("//div[@class='product_description']/following-sibling::p"),
            'price': response.css('.price_color::text').get()
        }
</pre></pre>
            </div>
            
        </div>
        <div class="step-img">
            <img src="/scrapy/01-scrapy-freeCodeCamp/sections/04-getNextPageUrls/04-02-scrapeInBookUrl/images/01-04.png">
        </div>
    </div>
    
</div>
<footer>
    <button tabindex="1" id="nxtLesson">next</button>    
</footer>
